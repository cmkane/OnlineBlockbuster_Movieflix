/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.uci.ics.kanec1.service.idm;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import edu.uci.ics.kanec1.service.idm.configs.Configs;
import edu.uci.ics.kanec1.service.idm.logger.BasicLogger;
import edu.uci.ics.kanec1.service.idm.models.ConfigsModel;
import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;
import org.glassfish.jersey.jackson.JacksonFeature;
import org.glassfish.jersey.server.ResourceConfig;

import javax.ws.rs.core.UriBuilder;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.sql.*;
import java.util.Properties;
import java.util.logging.Level;

public class Idm {
    private static Configs configs = new Configs();
    private static Connection con;

    public Idm() {
    }

    public static void main(String[] args) {
        Idm idm = new Idm();
        idm.initService(args);
    }

    private void initService(String[] args)
    {
        try{
            validateArguments(args);
            execArguments(args);
            initLogging(configs);
            BasicLogger.LOGGER.config("Starting service...");
            configs.currentConfigs();
            connectDB();
            if(con != null){
                testQuery();
            }
            initHTTPServer();
            BasicLogger.LOGGER.config("Service is initialized...");

        } catch (Exception e){
            e.printStackTrace();
        }
    }

    private void validateArguments(String[] args) {
        boolean isConfigOptionSet = false;
        for (int i = 0; i < args.length; ++i) {
            switch (args[i]) {
                case "--default":
                case "-d":
                    if (i + 1 < args.length) {
                        exitAppFailureArgs("Invalid arg after " + args[i] + " option: " + args[i + 1]);
                    }
                case "--config":
                case "-c":
                    if (!isConfigOptionSet) {
                        isConfigOptionSet = true;
                        ++i;
                    } else {
                        exitAppFailureArgs("Conflicting configuration file arguments.");
                    }
                    break;

                default:
                    exitAppFailureArgs("Unrecognized argument: " + args[i]);
            }
        }
    }

    private void execArguments(String[] args) {
        if (args.length > 0) {
            for (int i = 0; i < args.length; ++i) {
                switch (args[i]) {
                    case "--config":
                    case "-c":
                        // Config file specified. Load it.
                        getConfigFile(args[i + 1]);
                        ++i;
                        break;
                    case "--default":
                    case "-d":
                        System.err.println("Default config options selected.");
                        configs = new Configs();
                        break;
                    default:
                        exitAppFailure("Unrecognized argument: " + args[i]);
                }
            }
        } else {
            System.err.println("No config file specified. Using default values.");
            configs = new Configs();
        }
    }

    private ConfigsModel loadConfigs(String file) {
        BasicLogger.LOGGER.info("Loading configuration file...");
        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
        ConfigsModel configs = null;

        try {
            configs = mapper.readValue(new File(file), ConfigsModel.class);
        } catch (IOException e) {
            exitAppFailure("Unable to load configuration file.");
        }
        return configs;
    }

    private void getConfigFile(String configFile) {
        try {
            BasicLogger.LOGGER.info("Config file name: " + configFile);
            configs = new Configs(loadConfigs(configFile));
            BasicLogger.LOGGER.info("Configuration file successfully loaded.");
        } catch (NullPointerException e) {
            BasicLogger.LOGGER.info("Config file not found. Using default values.");
            configs = new Configs();
        }
    }

    private void exitAppFailureArgs(String message) {
        BasicLogger.LOGGER.log(Level.SEVERE, "ERROR: " + message);
        BasicLogger.LOGGER.log(Level.SEVERE, "Usage options: ");
        BasicLogger.LOGGER.log(Level.SEVERE, "\tSpecify configuration file:");
        BasicLogger.LOGGER.log(Level.SEVERE, "\t\t--config [file]");
        BasicLogger.LOGGER.log(Level.SEVERE, "\t\t-c");
        BasicLogger.LOGGER.log(Level.SEVERE, "\tUse default configuration:");
        BasicLogger.LOGGER.log(Level.SEVERE, "\t\t--default");
        BasicLogger.LOGGER.log(Level.SEVERE, "\t\t-d");
        System.exit(-1);
    }

    private void exitAppFailure(String message) {
        BasicLogger.LOGGER.log(Level.SEVERE, "ERROR: " + message);
        System.exit(-1);
    }

    private void initLogging(Configs config)
    {
        try{
            BasicLogger.initLogger(config.getOutputDir(), config.getOutputFile());
        }
        catch (IOException e){
            System.err.println("Unable to initialize logging.");
        }

    }

    private void connectDB()
    {
        BasicLogger.LOGGER.config("Connecting to database...");
        try {

            Class.forName(configs.getDbDriver());

            Properties connectionProp = new Properties();
            connectionProp.put("user", configs.getDbUsername());
            connectionProp.put("password", configs.getDbPassword());

            String url = "jdbc:mysql://"+ configs.getDbHostname() + ":" + configs.getDbPort() + "/" + configs.getDbName() + configs.getDbSettings();
            con = DriverManager.getConnection(url, connectionProp);

            BasicLogger.LOGGER.config("Connected to the SQL database " + configs.getDbName());
        } catch (Exception e)
        {
            e.printStackTrace();
            if (e instanceof  ClassNotFoundException) {
                BasicLogger.LOGGER.warning("ClassNotFoundException");
            }
            if (e instanceof ClassCastException) {
                BasicLogger.LOGGER.warning("ClassCastException");
            }
            if (e instanceof SQLException) {
                BasicLogger.LOGGER.warning("SQLException");
            }
            if (e instanceof NullPointerException) {
                BasicLogger.LOGGER.warning("NullPointerException");
            }
            BasicLogger.LOGGER.config("Unable to connect to the SQL database " + configs.getDbName());
        }
    }

    private void initHTTPServer() {
        BasicLogger.LOGGER.config("Initializing HTTP server...");
        String scheme = configs.getScheme();
        String hostName = configs.getHostName();
        int port = configs.getPort();
        String path = configs.getPath();

        try {
            URI uri = UriBuilder.fromUri(scheme + hostName + path).port(port).build();
            ResourceConfig rc = new ResourceConfig().packages("edu.uci.ics.kanec1.service.idm.resources");
            rc.register(JacksonFeature.class);
            HttpServer server = GrizzlyHttpServerFactory.createHttpServer(uri, rc, false);
            server.start();
            BasicLogger.LOGGER.config("HTTP server started.");
        } catch (IOException e) {
            BasicLogger.LOGGER.log(Level.SEVERE, "Unable to initialize HTTP server.");
            throw new RuntimeException();
        }
    }

    private void testQuery()
    {
        PreparedStatement pstmt = null;
        ResultSet r = null;
        try{
            String SQL = "SELECT COUNT(*) FROM users";
            pstmt = con.prepareStatement(SQL);
            r = pstmt.executeQuery();
            while(r.next()){
                int output = r.getInt("COUNT(*)");
                System.err.println("test query output: " + output);
            }

        } catch (SQLException e) {
            System.err.println("There was an error getting the count.");
            e.printStackTrace();
        }
    }

    public static Connection getCon() {
        return con;
    }

    public static Configs getConfigs() {
        return configs;
    }
}
